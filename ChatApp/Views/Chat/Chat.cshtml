@model IEnumerable<ChatApp.Models.MessageModel>

@{
    ViewBag.Title = "Chat";
    bool userNameExist = false;
    string userName = null;
    foreach (string key in Session.Keys)
    {
        if (key.Equals("userName"))
        {
            userNameExist = true;
        }
    }
    if (!userNameExist)
    {
        Session["userName"] = "Session Time-out!";
    }
    else
    {
        userName = Session["userName"].ToString();
    }
}

<div class="row">
    <h2>Chat user: @Session["userName"]</h2>
</div>

<div class="row" style="height: 100%; margin-top: 15px;">
    
    <div class="col-md-6">
        <b>Chat area</b>
        <div class="row">
            <div id="room" class="container-fluid" style="overflow: auto; margin-top: 10px; height: 500px; background-color: #ffdab9; border-radius: 15px">
                <ul id="roomContent" style="position: absolute; height: 490px; width: 99%; overflow: auto; margin-top: 5px; left: 1px; text-align: left; list-style-type: none;">
                    @foreach (var message in Model)
                    {
                        <li style="margin-left: -25px;">
                            <b>@message.Author: </b>@message.Text  @*<span>@message.Time</span>*@
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="row" style="margin-top: 15px;">
            <div class="col-md-1"></div>
            <div class="col-md-2" style="text-align: right">
                <h5><b>Message:</b></h5>
            </div>
            <div class="col-md-6" style="text-align: left">
                <input id="newMessage" class="form-control" type="text" placeholder="Enter your message"/>
            </div>
            <div class="col-md-1">
                <span id="sendButton" class="glyphicon glyphicon-send"></span>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="row">
            <b>Statistics</b>
        </div>
        <div class="row" style="margin-top: 10px;">
            <div class="col-md-4">
                Average time per message: <span id="avgTimePerMessage"></span>
            </div>
            <div class="col-md-4">
                Average letters per message (All users): <span id="avgLettersPerMessage"></span>
            </div>
            <div class="col-md-4">
                Average letters per user: <ul id="avgLettersPerUser"></ul>
            </div>
        </div>
        <div class="row">
            <canvas id="chart" height="150" width="300">Chart is Loading...</canvas>
        </div>
    </div>
</div>

<!--Reference the SignalR library. -->
<script src="~/scripts/jquery.signalR-2.2.1.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>

<script type="text/javascript">
    @if(userNameExist && userName != null)
    {
        <text>
            var chat = $.connection.chatHub;
            var chartHub = $.connection.cahrtHub;

            chat.client.addNewMessageToPage = function(name, message, time) {
                // Add the message to the page. 
                $('#roomContent').append('<li style="margin-left: -25px;"><b>' + name + ':</b> ' + message + '</li>');
                // Make is scroll to the last message.
                $('#roomContent').scrollTop($("#roomContent")[0].scrollHeight);
            };

            chat.client.changeStatistics = function (statistics) {
                updateAvgTimeForMessage(statistics.averageTimeForMessage);
                updateAvgLettersPerMessage(statistics.averageLettersPerMessage);
                updateAvgLettersPerUser(statistics.averageLettersPerUser);
                updateChaet(statistics.messagesPerHourChart, statistics.lettersPerHourChart);
            }

            $.connection.hub.start()
                .done(function() {

                    chat.server.initChartData();

                    $("#newMessage")
                        .keypress(function(e) {
                            if (e.which === 13) {
                                // Call the Send method on the hub.
                                chat.server.send("@userName", $('#newMessage').val());
                                // Clear text input and reset focus for next message.
                                $('#newMessage').val('').focus();
                                chat.server.updateStatistics();
                            }
                        });

                    $("#sendButton").click(function() {
                        // Call the Send method on the hub.
                        chat.server.send("@userName", $('#newMessage').val());
                        // Clear text input and reset focus for next message.
                        $('#newMessage').val('').focus();
                        chat.server.updateStatistics();
                    });
                });
                
                function updateAvgTimeForMessage(data) {
                    $("#avgTimePerMessage").empty();
                    $("#avgTimePerMessage").text(data);
                }

                function updateAvgLettersPerMessage(data) {
                    $("#avgLettersPerMessage").empty();
                    $("#avgLettersPerMessage").text(data);
                }

                function updateAvgLettersPerUser(data) {
                    $("#avgLettersPerUser").empty();
                    for(var user in data) {
                        if (data.hasOwnProperty(user)) {
                            $("#avgLettersPerUser").append("<li>" + user + " - " + data[user] + "</li>");
                        }
                    }
                }

                function updateChaet(messages, letters) {
                    var labels = ["Now"];
                    for (var i = 2; i < 168; i++) {
                        labels.unshift(i.toString());
                    }
                    labels.unshift("Week ago");
                    var messagesChartData = {
                        labels: labels,
                        datasets: [
                         {
                             label: "Total messages per hour in a week",
                             fillColor: '#382765',
                             data: messages
                         }, {
                             label: "Total letters per hour in a week",
                             fillColor: '#7BC225',
                             data: letters
                         }
                        ]
                    }
                    var canvasForMessagesChart = document.getElementById("chart");
                    var context2DLine = canvasForMessagesChart.getContext("2d");
                    var chart = new Chart(context2DLine,
                    {
                        type: 'line',// line/bar
                        data: messagesChartData,
                        options: {
                            animation: false,
                            title: {
                                display: true,
                                text: 'Total messages & letters per hour in a week',
                                fontColor: "#000000"
                            }
                        }
                    });
                }
        </text>
    }
</script>
